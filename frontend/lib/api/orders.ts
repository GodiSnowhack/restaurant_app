import { api } from './core';
import { Order, AssignOrderResponse, PaymentStatus } from './types';
import axios from 'axios';

// API —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏
export const ordersApi = {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  getAllOrders: async (params?: { 
    status?: string, 
    user_id?: number, 
    start_date?: string, 
    end_date?: string 
  }): Promise<Order[]> => {
    try {
      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø—Ä–æ—Å –∑–∞–∫–∞–∑–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', params);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const token = localStorage.getItem('token');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
      if (!token) {
        console.error('üîí –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤');
        throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      }
      
      // –°—Ç—Ä–æ–∏–º —Å—Ç—Ä–æ–∫—É –∑–∞–ø—Ä–æ—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º URLSearchParams
      const queryParams = new URLSearchParams();
      if (params?.status) queryParams.set('status', params.status);
      if (params?.user_id) queryParams.set('user_id', params.user_id.toString());
      if (params?.start_date) queryParams.set('start_date', params.start_date);
      if (params?.end_date) queryParams.set('end_date', params.end_date);
      
      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é —Å –±—ç–∫–µ–Ω–¥–∞
      try {
        // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π URL API –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const baseApiUrl = process.env.NEXT_PUBLIC_API_URL || 'https://backend-production-1a78.up.railway.app/api/v1';
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±—ç–∫–µ–Ω–¥—É
        const ordersUrl = `${baseApiUrl}/orders`;
        const url = queryParams.toString() ? `${ordersUrl}?${queryParams.toString()}` : ordersUrl;
        
        console.log(`üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±—ç–∫–µ–Ω–¥—É —á–µ—Ä–µ–∑ axios: ${url}`);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å —Ç–æ–∫–µ–Ω–æ–º
        const headers = {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'Authorization': `Bearer ${token}`
        };
        
        // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ (–±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞)
        console.log('–î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞:', {
          url,
          method: 'GET',
          headers: {
            ...headers,
            'Authorization': 'Bearer ***'
          }
        });
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º axios –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        const response = await axios.get(url, {
          headers,
          timeout: 10000,
          withCredentials: true,
          validateStatus: (status) => status < 500 // –ü—Ä–∏–Ω–∏–º–∞–µ–º –æ—Ç–≤–µ—Ç—ã —Å –∫–æ–¥–æ–º –¥–æ 500
        });
        
        console.log(`–û—Ç–≤–µ—Ç –æ—Ç –±—ç–∫–µ–Ω–¥–∞: —Å—Ç–∞—Ç—É—Å ${response.status}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        if (response.status !== 200) {
          throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –∑–∞–ø—Ä–æ—Å–µ: ${response.status}`);
        }
        
        const data = response.data;
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤ —Å –±—ç–∫–µ–Ω–¥–∞:`, data);
        
        if (Array.isArray(data)) {
          console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${data.length}`);
          return data;
        } else if (data && typeof data === 'object' && Array.isArray(data.items)) {
          console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${data.items.length}`);
          return data.items;
        } else {
          console.warn('‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö:', data);
          return [];
        }
      } catch (directError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –∑–∞–ø—Ä–æ—Å–µ –∫ –±—ç–∫–µ–Ω–¥—É:', directError);
        
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
        console.log('üîÑ –ü—Ä–æ–±—É–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ API-–ø—Ä–æ–∫—Å–∏');
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
        const proxyUrl = '/api/orders';
        const url = queryParams.toString() ? `${proxyUrl}?${queryParams.toString()}` : proxyUrl;
        
        console.log(`üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ API-–ø—Ä–æ–∫—Å–∏: ${url}`);
        
        const response = await axios.get(url, {
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          withCredentials: true,
          timeout: 10000
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        if (response.status !== 200) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ API-–ø—Ä–æ–∫—Å–∏: ${response.status}`);
          throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: ${response.status}`);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        const data = response.data;
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤ —á–µ—Ä–µ–∑ API-–ø—Ä–æ–∫—Å–∏:`, data);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–∞
        if (Array.isArray(data)) {
          console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${data.length}`);
          return data;
        } else if (data && typeof data === 'object' && Array.isArray(data.items)) {
          console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${data.items.length}`);
          return data.items;
        } else {
          console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö:', data);
          return [];
        }
      }
    } catch (error) {
      console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
      throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
    }
  },
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–º—É –æ—Ñ–∏—Ü–∏–∞–Ω—Ç—É
  getWaiterOrders: async (): Promise<Order[]> => {
    try {
      console.log('API: –ó–∞–ø—Ä–æ—Å –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞');
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const token = localStorage.getItem('token');
      if (!token) {
        console.error('API: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        return [];
      }
      
      // –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ API-–ø—Ä–æ–∫—Å–∏
      try {
        const response = await fetch('/api/waiter/orders', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'Authorization': `Bearer ${token}`,
            'X-User-Role': 'waiter'
          }
        });
        
        if (!response.ok) {
          throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);
        }
        
        const data = await response.json();
        return Array.isArray(data) ? data : [];
      } catch (apiError: any) {
        console.error('API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∑–∞–∫–∞–∑–æ–≤ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞:', apiError.message);
        
        // –ï—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π API
        try {
          const apiResponse = await api.get('/waiter/orders', {
            headers: {
              'X-User-Role': 'waiter'
            }
          });
          return apiResponse.data || [];
        } catch (error) {
          console.error('API: –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞ –Ω–µ —É–¥–∞–ª–∏—Å—å');
          return [];
        }
      }
    } catch (error: any) {
      console.error('API: –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞:', error);
      return [];
    }
  },
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ ID
  getOrderById: async (id: number): Promise<Order | null> => {
    try {
      console.log(`–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ #${id}`);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const token = localStorage.getItem('token');
      if (!token) {
        console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        return null;
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º URL –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
      const url = `/api/orders/${id}`;
      const headers = {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Authorization': `Bearer ${token}`
      };
      
      // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
      const response = await fetch(url, {
        method: 'GET',
        headers,
        credentials: 'include'
      });
      
      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);
      }
      
      const data = await response.json();
      console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:', data);
      
      return data;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ #${id}:`, error);
      return null;
    }
  },
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
  createOrder: async (order: Omit<Order, 'id' | 'created_at' | 'updated_at'>): Promise<Order> => {
    try {
      console.log('API: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:', order);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      const token = localStorage.getItem('token');
      if (!token) {
        throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      }
      
      // –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π API-–ø—Ä–æ–∫—Å–∏
      try {
        const response = await fetch('/api/orders', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify(order)
        });
        
        if (!response.ok) {
          throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('API: –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ API-–ø—Ä–æ–∫—Å–∏, ID:', data.id);
        return data;
      } catch (proxyError: any) {
        console.error('API: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ API-–ø—Ä–æ–∫—Å–∏:', proxyError.message);
        console.log('API: –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π API...');
        
        // –ï—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π API
        const response = await api.post('/orders', order);
        console.log('API: –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π API, ID:', response.data.id);
        return response.data;
      }
    } catch (error) {
      console.error('API: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
      throw error;
    }
  },
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
  updateOrder: async (id: number, orderData: Partial<Order>): Promise<Order> => {
    try {
      const response = await api.put(`/orders/${id}`, orderData);
      return response.data;
    } catch (error) {
      console.error(`API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ ${id}:`, error);
      throw error;
    }
  },
  
  // –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞
  cancelOrder: async (id: number, reason?: string): Promise<Order> => {
    try {
      const response = await api.post(`/orders/${id}/cancel`, { reason });
      console.log(`API: –ó–∞–∫–∞–∑ ${id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω`);
      return response.data;
    } catch (error) {
      console.error(`API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞ ${id}:`, error);
      throw error;
    }
  },
  
  // –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞
  processPayment: async (orderId: number, paymentDetails: any): Promise<any> => {
    try {
      const response = await api.post(`/orders/${orderId}/payment`, paymentDetails);
      console.log(`API: –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ ${orderId} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞`);
      return response.data;
    } catch (error) {
      console.error(`API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ ${orderId}:`, error);
      throw error;
    }
  },
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫–∞–∑–æ–≤
  getOrderStats: async (): Promise<any> => {
    try {
      const response = await api.get('/orders/stats');
      return response.data;
    } catch (error) {
      console.error('API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
      return null;
    }
  },
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
  updateOrderStatus: async (id: number, status: string): Promise<Order> => {
    try {
      const response = await api.put(`/orders/${id}/status`, { status });
      console.log(`API: –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ${id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${status}`);
      return response.data;
    } catch (error) {
      console.error(`API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ ${id}:`, error);
      throw error;
    }
  },

  // –ü—Ä–∏–≤—è–∑–∫–∞ –∑–∞–∫–∞–∑–∞ –∫ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç—É –ø–æ –∫–æ–¥—É
  assignOrderByCode: async (code: string): Promise<AssignOrderResponse> => {
    try {
      console.log('API: –ü—Ä–∏–≤—è–∑–∫–∞ –∑–∞–∫–∞–∑–∞ –ø–æ –∫–æ–¥—É:', code);
      
      const token = localStorage.getItem('token');
      if (!token) {
        throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      }

      const response = await fetch('/api/waiter/orders/bind', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'Authorization': `Bearer ${token}`,
          'X-User-Role': 'waiter'
        },
        body: JSON.stringify({ code })
      });

      const data = await response.json();
      
      if (!data.success) {
        return {
          success: false,
          message: data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –∑–∞–∫–∞–∑'
        };
      }

      return {
        success: true,
        orderId: data.orderId,
        orderNumber: data.orderNumber,
        message: data.message || '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω'
      };
    } catch (error: any) {
      console.error('API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∑–∞–∫–∞–∑–∞:', error);
      return {
        success: false,
        message: error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∑–∞–∫–∞–∑–∞'
      };
    }
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞
  updateOrderPaymentStatus: async (id: number, status: PaymentStatus): Promise<{ success: boolean; order: Order }> => {
    try {
      console.log(`API: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ ${id} –Ω–∞ ${status}`);
      
      const token = localStorage.getItem('token');
      if (!token) {
        throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      }

      const response = await fetch(`/api/orders/${id}/payment-status`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'Authorization': `Bearer ${token}`,
          'X-User-Role': 'waiter'
        },
        body: JSON.stringify({ status })
      });

      const data = await response.json();
      
      if (!data.success) {
        throw new Error(data.message || `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ ${id}`);
      }

      return data;
    } catch (error: any) {
      console.error(`API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ ${id}:`, error);
      throw error;
    }
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
function generateAdminOrdersDemoData(): Order[] {
  const now = new Date();
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –ø—Ä–æ—à–ª–æ–º —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º —Å–º–µ—â–µ–Ω–∏–µ–º (–¥–æ 10 –¥–Ω–µ–π –Ω–∞–∑–∞–¥)
  const getRandomPastDate = () => {
    const date = new Date(now);
    const randomDaysBack = Math.floor(Math.random() * 10) + 1;
    date.setDate(date.getDate() - randomDaysBack);
    return date.toISOString();
  };
  
  // –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –Ω–∞–±–æ—Ä –∑–∞–∫–∞–∑–æ–≤
  return [
    {
      id: 1001,
      user_id: 1,
      waiter_id: 1,
      status: 'pending',
      payment_status: 'pending',
      payment_method: 'card',
      order_type: 'dine-in',
      total_amount: 3500,
      created_at: getRandomPastDate(),
      updated_at: getRandomPastDate(),
      items: [
        {
          dish_id: 1,
          quantity: 2,
          price: 1200,
          name: '–°—Ç–µ–π–∫ –∏–∑ –≥–æ–≤—è–¥–∏–Ω—ã'
        },
        {
          dish_id: 2,
          quantity: 1,
          price: 1100,
          name: '–ü–∞—Å—Ç–∞ –ö–∞—Ä–±–æ–Ω–∞—Ä–∞'
        }
      ],
      table_number: 5,
      customer_name: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ò–≤–∞–Ω–æ–≤',
      customer_phone: '+7 (777) 111-22-33'
    },
    {
      id: 1002,
      user_id: 2,
      waiter_id: 2,
      status: 'confirmed',
      payment_status: 'pending',
      payment_method: 'cash',
      order_type: 'dine-in',
      total_amount: 2800,
      created_at: getRandomPastDate(),
      updated_at: getRandomPastDate(),
      items: [
        {
          dish_id: 3,
          quantity: 1,
          price: 1500,
          name: '–°—ë–º–≥–∞ –Ω–∞ –≥—Ä–∏–ª–µ'
        },
        {
          dish_id: 4,
          quantity: 2,
          price: 650,
          name: '–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å'
        }
      ],
      table_number: 3,
      customer_name: '–ï–ª–µ–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞',
      customer_phone: '+7 (777) 222-33-44'
    },
    {
      id: 1003,
      user_id: 3,
      waiter_id: 1,
      status: 'preparing',
      payment_status: 'paid',
      payment_method: 'card',
      order_type: 'dine-in',
      total_amount: 4200,
      created_at: getRandomPastDate(),
      updated_at: getRandomPastDate(),
      items: [
        {
          dish_id: 5,
          quantity: 1,
          price: 2500,
          name: '–°—Ç–µ–π–∫ –†–∏–±–∞–π'
        },
        {
          dish_id: 6,
          quantity: 1,
          price: 900,
          name: '–¢–∏—Ä–∞–º–∏—Å—É'
        },
        {
          dish_id: 7,
          quantity: 1,
          price: 800,
          name: '–í–∏–Ω–æ –∫—Ä–∞—Å–Ω–æ–µ (–±–æ–∫–∞–ª)'
        }
      ],
      table_number: 9,
      customer_name: '–î–º–∏—Ç—Ä–∏–π –°–∏–¥–æ—Ä–æ–≤',
      customer_phone: '+7 (777) 333-44-55'
    },
    {
      id: 1004,
      user_id: 4,
      waiter_id: 3,
      status: 'completed',
      payment_status: 'paid',
      payment_method: 'card',
      order_type: 'delivery',
      total_amount: 3100,
      created_at: getRandomPastDate(),
      updated_at: getRandomPastDate(),
      items: [
        {
          dish_id: 8,
          quantity: 1,
          price: 1800,
          name: '–ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞'
        },
        {
          dish_id: 9,
          quantity: 1,
          price: 1300,
          name: '–°—É—à–∏-—Å–µ—Ç –§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è'
        }
      ],
      customer_name: '–ê–Ω–¥—Ä–µ–π –ö—É–∑–Ω–µ—Ü–æ–≤',
      customer_phone: '+7 (777) 444-55-66',
      delivery_address: '—É–ª. –ê–±–∞—è 44, –∫–≤. 12'
    },
    {
      id: 1005,
      user_id: 5,
      waiter_id: undefined,
      status: 'cancelled',
      payment_status: 'refunded',
      payment_method: 'card',
      order_type: 'pickup',
      total_amount: 2400,
      created_at: getRandomPastDate(),
      updated_at: getRandomPastDate(),
      items: [
        {
          dish_id: 10,
          quantity: 2,
          price: 1200,
          name: '–ë—É—Ä–≥–µ—Ä —Å –≥–æ–≤—è–¥–∏–Ω–æ–π'
        }
      ],
      customer_name: '–ù–∞—Ç–∞–ª—å—è –°–º–∏—Ä–Ω–æ–≤–∞',
      customer_phone: '+7 (777) 555-66-77'
    }
  ];
}